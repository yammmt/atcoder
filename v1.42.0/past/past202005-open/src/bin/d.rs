// 言語仕様で苦しい

use proconio::input;
use proconio::marker::Chars;

fn main() {
    input! {
        n: usize,
        s5: [Chars; 5],
    }

    let num_aa = [
        [".###", "..#.", ".###", ".###", ".#.#", ".###", ".###", ".###", ".###", ".###"],
        [".#.#", ".##.", "...#", "...#", ".#.#", ".#..", ".#..", "...#", ".#.#", ".#.#"],
        [".#.#", "..#.", ".###", ".###", ".###", ".###", ".###", "...#", ".###", ".###"],
        [".#.#", "..#.", ".#..", "...#", "...#", "...#", ".#.#", "...#", ".#.#", "...#"],
        [".###", ".###", ".###", ".###", "...#", ".###", ".###", "...#", ".###", ".###"]
    ];

    for i in 0..n {
        let i_b = 4 * i;
        let now_aa = vec![
            [s5[0][i_b], s5[0][i_b + 1], s5[0][i_b + 2], s5[0][i_b + 3]].iter().collect::<String>(),
            [s5[1][i_b], s5[1][i_b + 1], s5[1][i_b + 2], s5[1][i_b + 3]].iter().collect::<String>(),
            [s5[2][i_b], s5[2][i_b + 1], s5[2][i_b + 2], s5[2][i_b + 3]].iter().collect::<String>(),
            [s5[3][i_b], s5[3][i_b + 1], s5[3][i_b + 2], s5[3][i_b + 3]].iter().collect::<String>(),
            [s5[4][i_b], s5[4][i_b + 1], s5[4][i_b + 2], s5[4][i_b + 3]].iter().collect::<String>(),
        ];

        'j_loop: for j in 0..10 {
            for k in 0..5 {
                if now_aa[k] != num_aa[k][j] {
                    break;
                }

                if k == 4 {
                    print!("{}", j);
                    break 'j_loop;
                }
            }
        }
    }

    println!();
}

// 10
// .### ..#. .### .### .#.# .### .### .### .### .### .
// .#.# .##. ...# ...# .#.# .#.. .#.. ...# .#.# .#.# .
// .#.# ..#. .### .### .### .### .### ...# .### .### .
// .#.# ..#. .#.. ...# ...# ...# .#.# ...# .#.# ...# .
// .### .### .### .### ...# .### .### ...# .### .### .
